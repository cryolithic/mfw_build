# Copyright (c) 2022 Arista Networks, Inc.  All rights reserved.
# Arista Networks, Inc. Confidential and Proprietary.

images:
  build-floor:
    units:
    - image: barney.ci/debian%minbase
    - image: barney.ci/debian%network
    finalizers:
    - - apt
      - install
      - -y
      - build-essential
      - curl
      - file
      - gawk
      - gettext
      - git
      - libncurses-dev
      - libssl-dev
      - openssh-client
      - python3
      - python3-distutils-extra
      - qemu-utils
      - rsync
      - ruby-sass
      - swig
      - time
      - unzip
      - wget
      - zlib1g-dev
    entry:
      mutables:
        - /root
      env:
        FORCE_UNSAFE_CONFIGURE: 1
        HOME: /root
        
  demo:
    units:
    - floor: .%build-floor
      build: |
        printenv > /dest/env
        echo "Hello, world!" > /dest/greeting
        ls -l /home > /dest/mfw-file-list.txt
        find /src > /dest/src-file-list.txt

  toolchain:
    description: |
      Build an x86_64 openwrt toolchain, and store the corresponding
      staging_dir under /mfw-toolchain.
      This directory can be then copied into the openwrt downstream
      builds, by copying it back into the corresponding source tree.
    units:
    - image: .%build-floor
    - floor: .%build-floor
      sources: [ code.arista.io/mfw/build, github.com/untangle/openwrt ]
      build: |
        set -e
        # barney sets DESTDIR to /dest, but this really confuses openwrt
        unset DESTDIR
        # force x86_64 target
        cd /src/github.com/untangle/openwrt
        echo CONFIG_TARGET_x86=y > .config
        echo CONFIG_TARGET_x86_64=y >> .config
        echo CONFIG_TARGET_x86_64_DEVICE_generic=y >> .config
        # build toolchain
        /src/code.arista.io/mfw/build/build.sh -u -t toolchain/install
        # store built toolchain
        mkdir -p /dest/mfw-toolchain
        cp -a staging_dir/ /dest/mfw-toolchain/

  golang:
    description: |
      Build the golang compiler on top of the x86_64 openwrt toolchain.
    units:
    - image: .%toolchain
    - floor: .%toolchain
      sources: [ code.arista.io/mfw/build, github.com/untangle/openwrt ]
      build: |
        set -e
        # copy build%toolchain's staging_dir into our source tree
        cp -a /mfw-toolchain/staging_dir /src/github.com/untangle/openwrt/
        # barney sets DESTDIR to /dest, but this really confuses openwrt
        unset DESTDIR
        # force x86_64 target
        cd /src/github.com/untangle/openwrt
        echo CONFIG_TARGET_x86=y > .config
        echo CONFIG_TARGET_x86_64=y >> .config
        echo CONFIG_TARGET_x86_64_DEVICE_generic=y >> .config
        # build golang
        /src/code.arista.io/mfw/build/build.sh -u -t package/feeds/packages/golang/host/compile
        # store built toolchain
        mkdir -p /dest/mfw-toolchain/staging_dir/
        cp -a staging_dir/hostpkg /dest/mfw-toolchain/staging_dir/

  world:
    units:
    - floor: .%toolchain
      sources:
        - code.arista.io/mfw/build
        - github.com/untangle/openwrt
        - github.com/untangle/mfw_feeds
      build: |
        set -e
        # copy build%toolchain's staging_dir into our source tree
        cp -a /mfw-toolchain/staging_dir /src/github.com/untangle/openwrt/
        # use barney-supplied feeds instead of fetching from github
        perl -i -pe 's|^src-git mfw .+|src-link mfw /src/github.com/untangle/mfw_feeds|' /src/code.arista.io/mfw/build/feeds.conf.mfw
        # do not build vmware images
        rm /src/github.com/untangle/mfw_feeds/configs/device/x86_64/vmware
        # barney sets DESTDIR to /dest, but this really confuses openwrt
        unset DESTDIR
        # build our world image
        cd /src/github.com/untangle/openwrt
        /src/code.arista.io/mfw/build/build.sh -u
        # extract FS content into destination image
        tar -C /dest -xavf bin/targets/x86/64/mfw-x86-64-generic-rootfs.tar.gz 
